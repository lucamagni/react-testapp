__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createPathParser = exports.urlToPathAndParams = undefined;

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _pathToRegexp = _require(_dependencyMap[0], "path-to-regexp");

  var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

  var _NavigationActions = _require(_dependencyMap[1], "../NavigationActions");

  var _NavigationActions2 = _interopRequireDefault(_NavigationActions);

  var _invariant = _require(_dependencyMap[2], "../utils/invariant");

  var _invariant2 = _interopRequireDefault(_invariant);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var queryString = _require(_dependencyMap[3], "query-string");

  function isEmpty(obj) {
    if (!obj) return true;

    for (var key in obj) {
      return false;
    }

    return true;
  }

  var getParamsFromPath = function getParamsFromPath(inputParams, pathMatch, pathMatchKeys) {
    var params = pathMatch.slice(1).reduce(function (paramsOut, matchResult, i) {
      var key = pathMatchKeys[i];

      if (!key || key.asterisk) {
        return paramsOut;
      }

      var paramName = key.name;
      var decodedMatchResult = void 0;

      try {
        decodedMatchResult = decodeURIComponent(matchResult);
      } catch (e) {}

      paramsOut[paramName] = decodedMatchResult || matchResult;
      return paramsOut;
    }, _extends({}, inputParams));
    return params;
  };

  var getRestOfPath = function getRestOfPath(pathMatch, pathMatchKeys) {
    var rest = pathMatch[pathMatchKeys.findIndex(function (k) {
      return k.asterisk;
    }) + 1];
    return rest;
  };

  var urlToPathAndParams = exports.urlToPathAndParams = function urlToPathAndParams(url, uriPrefix) {
    var searchMatch = url.match(/^(.*)\?(.*)$/);
    var params = searchMatch ? queryString.parse(searchMatch[2]) : {};
    var urlWithoutSearch = searchMatch ? searchMatch[1] : url;
    var delimiter = uriPrefix || '://';
    var path = urlWithoutSearch.split(delimiter)[1];

    if (path === undefined) {
      path = urlWithoutSearch;
    }

    if (path === '/') {
      path = '';
    }

    if (path[path.length - 1] === '/') {
      path = path.slice(0, -1);
    }

    return {
      path: path,
      params: params
    };
  };

  var createPathParser = exports.createPathParser = function createPathParser(childRouters, routeConfigs) {
    var pathConfigs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var pathsByRouteNames = {};
    var paths = [];
    Object.keys(childRouters).forEach(function (routeName) {
      var pathPattern = void 0;

      if (pathConfigs[routeName] !== undefined) {
        pathPattern = pathConfigs[routeName];
      } else {
        pathPattern = routeConfigs[routeName].path;
      }

      if (pathPattern === undefined) {
        pathPattern = routeName;
      }

      (0, _invariant2.default)(pathPattern === null || typeof pathPattern === 'string', "Route path for " + routeName + " must be specified as a string, or null.");
      var isPathMatchable = pathPattern !== null;
      var exactReKeys = [];
      var exactRe = isPathMatchable ? (0, _pathToRegexp2.default)(pathPattern, exactReKeys) : null;
      var extendedPathReKeys = [];
      var isWildcard = pathPattern === '' || !isPathMatchable;
      var extendedPathRe = (0, _pathToRegexp2.default)(isWildcard ? '*' : pathPattern + "/*", extendedPathReKeys);
      pathsByRouteNames[routeName] = {
        exactRe: exactRe,
        exactReKeys: exactReKeys,
        extendedPathRe: extendedPathRe,
        extendedPathReKeys: extendedPathReKeys,
        isWildcard: isWildcard,
        toPath: pathPattern === null ? function () {
          return '';
        } : (0, _pathToRegexp.compile)(pathPattern)
      };
    });
    paths = Object.entries(pathsByRouteNames);

    var getActionForPathAndParams = function getActionForPathAndParams() {
      var pathToResolve = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var inputParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var matchedAction = null;

      for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref3;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref3 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref3 = _i.value;
        }

        var _ref = _ref3;

        var _ref2 = _slicedToArray(_ref, 2);

        var routeName = _ref2[0];
        var path = _ref2[1];
        var exactRe = path.exactRe,
            exactReKeys = path.exactReKeys,
            extendedPathRe = path.extendedPathRe,
            extendedPathReKeys = path.extendedPathReKeys;
        var childRouter = childRouters[routeName];
        var exactMatch = exactRe && exactRe.exec(pathToResolve);

        if (exactMatch && exactMatch.length) {
          var extendedMatch = extendedPathRe && extendedPathRe.exec(pathToResolve);
          var childAction = null;

          if (extendedMatch && childRouter) {
            var restOfPath = getRestOfPath(extendedMatch, extendedPathReKeys);
            childAction = childRouter.getActionForPathAndParams(restOfPath, inputParams);
          }

          return _NavigationActions2.default.navigate({
            routeName: routeName,
            params: getParamsFromPath(inputParams, exactMatch, exactReKeys),
            action: childAction
          });
        }
      }

      for (var _iterator2 = paths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref6;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref6 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref6 = _i2.value;
        }

        var _ref4 = _ref6;

        var _ref5 = _slicedToArray(_ref4, 2);

        var _routeName = _ref5[0];
        var _path = _ref5[1];
        var extendedPathRe = _path.extendedPathRe,
            extendedPathReKeys = _path.extendedPathReKeys;
        var childRouter = childRouters[_routeName];
        var extendedMatch = extendedPathRe && extendedPathRe.exec(pathToResolve);

        if (extendedMatch && extendedMatch.length) {
          var _restOfPath = getRestOfPath(extendedMatch, extendedPathReKeys);

          var _childAction = null;

          if (childRouter) {
            _childAction = childRouter.getActionForPathAndParams(_restOfPath, inputParams);
          }

          if (!_childAction) {
            continue;
          }

          return _NavigationActions2.default.navigate({
            routeName: _routeName,
            params: getParamsFromPath(inputParams, extendedMatch, extendedPathReKeys),
            action: _childAction
          });
        }
      }

      return null;
    };

    var getPathAndParamsForRoute = function getPathAndParamsForRoute(route) {
      var routeName = route.routeName,
          params = route.params;
      var childRouter = childRouters[routeName];
      var _pathsByRouteNames$ro = pathsByRouteNames[routeName],
          toPath = _pathsByRouteNames$ro.toPath,
          exactReKeys = _pathsByRouteNames$ro.exactReKeys;
      var subPath = toPath(params);
      var nonPathParams = {};

      if (params) {
        Object.keys(params).filter(function (paramName) {
          return !exactReKeys.find(function (k) {
            return k.name === paramName;
          });
        }).forEach(function (paramName) {
          nonPathParams[paramName] = params[paramName];
        });
      }

      if (childRouter) {
        var child = childRouter.getPathAndParamsForState(route);
        return {
          path: subPath ? subPath + "/" + child.path : child.path,
          params: child.params ? _extends({}, nonPathParams, child.params) : nonPathParams
        };
      }

      return {
        path: subPath,
        params: nonPathParams
      };
    };

    return {
      getActionForPathAndParams: getActionForPathAndParams,
      getPathAndParamsForRoute: getPathAndParamsForRoute
    };
  };

  exports.default = {
    getParamsFromPath: getParamsFromPath,
    createPathParser: createPathParser
  };
});