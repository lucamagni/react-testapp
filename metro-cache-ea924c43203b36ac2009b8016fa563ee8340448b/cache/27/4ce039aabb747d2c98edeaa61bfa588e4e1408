__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/var/www/React/node_modules/react-native-platform-touchable/PlatformTouchable.js";

  var _reactNative = _require(_dependencyMap[2], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    PlatformTouchable: {
      displayName: "PlatformTouchable"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/var/www/React/node_modules/react-native-platform-touchable/PlatformTouchable.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var TouchableComponent = void 0;

  if (_reactNative.Platform.OS === 'android') {
    TouchableComponent = _reactNative.Platform.Version <= 20 ? _reactNative.TouchableOpacity : _reactNative.TouchableNativeFeedback;
  } else {
    TouchableComponent = _reactNative.TouchableOpacity;
  }

  if (TouchableComponent !== _reactNative.TouchableNativeFeedback) {
    TouchableComponent.SelectableBackground = function () {
      return {};
    };

    TouchableComponent.SelectableBackgroundBorderless = function () {
      return {};
    };

    TouchableComponent.Ripple = function () {
      return {};
    };

    TouchableComponent.canUseNativeForeground = function () {
      return false;
    };
  }

  var PlatformTouchable = _wrapComponent("PlatformTouchable")((_temp = _class = function (_React$Component) {
    _inherits(PlatformTouchable, _React$Component);

    function PlatformTouchable() {
      _classCallCheck(this, PlatformTouchable);

      return _possibleConstructorReturn(this, (PlatformTouchable.__proto__ || Object.getPrototypeOf(PlatformTouchable)).apply(this, arguments));
    }

    _createClass(PlatformTouchable, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            style = _props.style,
            foreground = _props.foreground,
            background = _props.background,
            useForeground = _props.useForeground,
            props = _objectWithoutProperties(_props, ["children", "style", "foreground", "background", "useForeground"]);

        children = _react3.default.Children.only(children);

        if (TouchableComponent === _reactNative.TouchableNativeFeedback) {
          useForeground = foreground && _reactNative.TouchableNativeFeedback.canUseNativeForeground();

          if (foreground && background) {
            console.warn('Specified foreground and background for Touchable, only one can be used at a time. Defaulted to foreground.');
          }

          return _react3.default.createElement(
            TouchableComponent,
            _extends({}, props, {
              useForeground: useForeground,
              background: useForeground && foreground || background,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 59
              }
            }),
            _react3.default.createElement(
              _reactNative.View,
              {
                style: style,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 63
                }
              },
              children
            )
          );
        } else if (TouchableComponent === _reactNative.TouchableWithoutFeedback) {
          return _react3.default.createElement(
            _reactNative.TouchableWithoutFeedback,
            _extends({}, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 70
              }
            }),
            _react3.default.createElement(
              _reactNative.View,
              {
                style: style,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 71
                }
              },
              children
            )
          );
        } else {
          var TouchableFallback = this.props.fallback || TouchableComponent;
          return _react3.default.createElement(
            TouchableFallback,
            _extends({}, props, {
              style: style,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 79
              }
            }),
            children
          );
        }
      }
    }]);

    return PlatformTouchable;
  }(_react3.default.Component), _class.SelectableBackground = TouchableComponent.SelectableBackground, _class.SelectableBackgroundBorderless = TouchableComponent.SelectableBackgroundBorderless, _class.Ripple = TouchableComponent.Ripple, _class.canUseNativeForeground = TouchableComponent.canUseNativeForeground, _temp));

  exports.default = PlatformTouchable;
});