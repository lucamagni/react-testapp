__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _withNavigation = _require(_dependencyMap[2], "./withNavigation");

  var _withNavigation2 = _interopRequireDefault(_withNavigation);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    NavigationEvents: {
      displayName: "NavigationEvents"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/var/www/React/node_modules/react-navigation/src/views/NavigationEvents.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var EventNameToPropName = {
    willFocus: 'onWillFocus',
    didFocus: 'onDidFocus',
    willBlur: 'onWillBlur',
    didBlur: 'onDidBlur'
  };
  var EventNames = Object.keys(EventNameToPropName);

  var NavigationEvents = _wrapComponent("NavigationEvents")(function (_React$Component) {
    _inherits(NavigationEvents, _React$Component);

    function NavigationEvents() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, NavigationEvents);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = NavigationEvents.__proto__ || Object.getPrototypeOf(NavigationEvents)).call.apply(_ref, [this].concat(args))), _this), _this.addListener = function (eventName) {
        var listener = _this.props[EventNameToPropName[eventName]];

        if (listener) {
          _this.subscriptions[eventName] = _this.props.navigation.addListener(eventName, listener);
        }
      }, _this.removeListener = function (eventName) {
        if (_this.subscriptions[eventName]) {
          _this.subscriptions[eventName].remove();

          _this.subscriptions[eventName] = undefined;
        }
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(NavigationEvents, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.subscriptions = {};
        EventNames.forEach(this.addListener);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this2 = this;

        EventNames.forEach(function (eventName) {
          var listenerHasChanged = _this2.props[EventNameToPropName[eventName]] !== prevProps[EventNameToPropName[eventName]];

          if (listenerHasChanged) {
            _this2.removeListener(eventName);

            _this2.addListener(eventName);
          }
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        EventNames.forEach(this.removeListener);
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);

    return NavigationEvents;
  }(_react3.default.Component));

  exports.default = (0, _withNavigation2.default)(NavigationEvents);
});