__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/var/www/React/node_modules/@expo/samples/ExpoLinksView.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _expo = _require(_dependencyMap[3], "expo");

  var _vectorIcons = _require(_dependencyMap[4], "@expo/vector-icons");

  var _reactNativePlatformTouchable = _require(_dependencyMap[5], "react-native-platform-touchable");

  var _reactNativePlatformTouchable2 = _interopRequireDefault(_reactNativePlatformTouchable);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ExpoLinksScreen: {
      displayName: "ExpoLinksScreen"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/var/www/React/node_modules/@expo/samples/ExpoLinksView.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ExpoLinksScreen = _wrapComponent("ExpoLinksScreen")(function (_React$Component) {
    _inherits(ExpoLinksScreen, _React$Component);

    function ExpoLinksScreen() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, ExpoLinksScreen);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ExpoLinksScreen.__proto__ || Object.getPrototypeOf(ExpoLinksScreen)).call.apply(_ref, [this].concat(args))), _this), _this._handlePressSlack = function () {
        _expo.WebBrowser.openBrowserAsync('https://slack.expo.io');
      }, _this._handlePressDocs = function () {
        _expo.WebBrowser.openBrowserAsync('http://docs.expo.io');
      }, _this._handlePressForums = function () {
        _expo.WebBrowser.openBrowserAsync('http://forums.expo.io');
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ExpoLinksScreen, [{
      key: "render",
      value: function render() {
        return _react3.default.createElement(
          _reactNative.View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 10
            }
          },
          _react3.default.createElement(
            _reactNative.Text,
            {
              style: styles.optionsTitleText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 11
              }
            },
            "Resources"
          ),
          _react3.default.createElement(
            _reactNativePlatformTouchable2.default,
            {
              style: styles.option,
              background: _reactNativePlatformTouchable2.default.Ripple('#ccc', false),
              onPress: this._handlePressDocs,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 15
              }
            },
            _react3.default.createElement(
              _reactNative.View,
              {
                style: {
                  flexDirection: 'row'
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 19
                }
              },
              _react3.default.createElement(
                _reactNative.View,
                {
                  style: styles.optionIconContainer,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 20
                  }
                },
                _react3.default.createElement(_reactNative.Image, {
                  source: _require(_dependencyMap[6], './assets/images/expo-icon.png'),
                  resizeMode: "contain",
                  fadeDuration: 0,
                  style: {
                    width: 20,
                    height: 20,
                    marginTop: 1
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 21
                  }
                })
              ),
              _react3.default.createElement(
                _reactNative.View,
                {
                  style: styles.optionTextContainer,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 28
                  }
                },
                _react3.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.optionText,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 29
                    }
                  },
                  "Read the Expo documentation"
                )
              )
            )
          ),
          _react3.default.createElement(
            _reactNativePlatformTouchable2.default,
            {
              background: _reactNativePlatformTouchable2.default.Ripple('#ccc', false),
              style: styles.option,
              onPress: this._handlePressSlack,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 36
              }
            },
            _react3.default.createElement(
              _reactNative.View,
              {
                style: {
                  flexDirection: 'row'
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 40
                }
              },
              _react3.default.createElement(
                _reactNative.View,
                {
                  style: styles.optionIconContainer,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                  }
                },
                _react3.default.createElement(_reactNative.Image, {
                  source: _require(_dependencyMap[7], './assets/images/slack-icon.png'),
                  fadeDuration: 0,
                  style: {
                    width: 20,
                    height: 20
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 42
                  }
                })
              ),
              _react3.default.createElement(
                _reactNative.View,
                {
                  style: styles.optionTextContainer,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 48
                  }
                },
                _react3.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.optionText,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 49
                    }
                  },
                  "Join us on Slack"
                )
              )
            )
          ),
          _react3.default.createElement(
            _reactNativePlatformTouchable2.default,
            {
              style: styles.option,
              background: _reactNativePlatformTouchable2.default.Ripple('#ccc', false),
              onPress: this._handlePressForums,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 56
              }
            },
            _react3.default.createElement(
              _reactNative.View,
              {
                style: {
                  flexDirection: 'row'
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 60
                }
              },
              _react3.default.createElement(
                _reactNative.View,
                {
                  style: styles.optionIconContainer,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 61
                  }
                },
                _react3.default.createElement(_vectorIcons.Ionicons, {
                  name: "ios-chatboxes",
                  size: 22,
                  color: "#ccc",
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 62
                  }
                })
              ),
              _react3.default.createElement(
                _reactNative.View,
                {
                  style: styles.optionTextContainer,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 64
                  }
                },
                _react3.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.optionText,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 65
                    }
                  },
                  "Ask a question on the Expo forums"
                )
              )
            )
          )
        );
      }
    }]);

    return ExpoLinksScreen;
  }(_react3.default.Component));

  exports.default = ExpoLinksScreen;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      paddingTop: 15
    },
    optionsTitleText: {
      fontSize: 16,
      marginLeft: 15,
      marginTop: 9,
      marginBottom: 12
    },
    optionIconContainer: {
      marginRight: 9
    },
    option: {
      backgroundColor: '#fdfdfd',
      paddingHorizontal: 15,
      paddingVertical: 15,
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
      borderBottomColor: '#EDEDED'
    },
    optionText: {
      fontSize: 15,
      marginTop: 1
    }
  });
});