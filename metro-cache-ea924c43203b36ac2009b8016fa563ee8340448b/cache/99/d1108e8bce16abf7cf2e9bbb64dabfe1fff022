__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Token = function () {
        function Token() {
            _classCallCheck(this, Token);
        }

        _createClass(Token, null, [{
            key: "getToken",
            value: function getToken() {
                var token;
                return regeneratorRuntime.async(function getToken$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.prev = 0;
                                _context.next = 3;
                                return regeneratorRuntime.awrap(AsyncStorage.getItem('X-Auth-Token'));

                            case 3:
                                token = _context.sent;
                                return _context.abrupt("return", token);

                            case 7:
                                _context.prev = 7;
                                _context.t0 = _context["catch"](0);
                                console.log("error while getting token");
                                return _context.abrupt("return", 'error');

                            case 11:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, null, this, [[0, 7]]);
            }
        }]);

        return Token;
    }();

    exports.default = Token;
});